{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ZrGitA_KnRO0","collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716437409159,"user_tz":300,"elapsed":143305,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"690b118a-e633-4fb5-9224-1966d1a88977"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m70.3/70.3 MB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m104.8/104.8 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m721.6/721.6 kB\u001b[0m \u001b[31m39.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.7/73.7 MB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m44.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m33.7/33.7 MB\u001b[0m \u001b[31m38.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m241.2/241.2 kB\u001b[0m \u001b[31m26.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m323.2/323.2 kB\u001b[0m \u001b[31m31.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m489.9/489.9 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m230.9/230.9 kB\u001b[0m \u001b[31m25.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.2/61.2 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m83.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.7/7.7 MB\u001b[0m \u001b[31m82.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m90.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m440.7/440.7 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m55.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m72.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m56.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.8/2.8 MB\u001b[0m \u001b[31m59.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m294.6/294.6 kB\u001b[0m \u001b[31m19.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Building wheel for farmhashpy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for jax (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for sqlalchemy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","torch 2.3.0+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-nccl-cu12==2.20.5; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.0+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","chex 0.1.86 requires jax>=0.4.16, but you have jax 0.4.14 which is incompatible.\n","flax 0.8.3 requires jax>=0.4.19, but you have jax 0.4.14 which is incompatible.\n","google-colab 1.0.0 requires portpicker==1.5.2, but you have portpicker 1.6.0 which is incompatible.\n","ipython-sql 0.5.0 requires sqlalchemy>=2.0, but you have sqlalchemy 1.4.20 which is incompatible.\n","pydantic 2.7.1 requires typing-extensions>=4.6.1, but you have typing-extensions 4.5.0 which is incompatible.\n","pydantic-core 2.18.2 requires typing-extensions!=4.7.0,>=4.6.0, but you have typing-extensions 4.5.0 which is incompatible.\n","tensorflow-metadata 1.15.0 requires protobuf<4.21,>=3.20.3; python_version < \"3.11\", but you have protobuf 4.25.3 which is incompatible.\n","tf-keras 2.15.1 requires tensorflow<2.16,>=2.15, but you have tensorflow 2.14.1 which is incompatible.\n","torch 2.3.0+cu121 requires typing-extensions>=4.8.0, but you have typing-extensions 4.5.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0m"]}],"source":["#@test {\"skip\": true}\n","\n","!pip install --quiet --upgrade tensorflow-federated"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"QLyJIaLlERJ8","executionInfo":{"status":"ok","timestamp":1716437409159,"user_tz":300,"elapsed":3,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"outputs":[],"source":["%load_ext tensorboard"]},{"cell_type":"code","source":["import collections\n","import pandas as pd\n","import numpy as np\n","import warnings\n","warnings.filterwarnings('ignore')\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Flatten, Dense, Dropout\n","from tensorflow.keras import optimizers\n","import tensorflow as tf\n","import tensorflow_federated as tff\n","%matplotlib inline\n","from tensorflow.keras.regularizers import L2\n","import os\n","np.random.seed(0)"],"metadata":{"id":"MjEqsR4hzbuj","executionInfo":{"status":"ok","timestamp":1716437422346,"user_tz":300,"elapsed":13190,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["ls"],"metadata":{"id":"f79Ehf-DkaRJ","executionInfo":{"status":"ok","timestamp":1716437422499,"user_tz":300,"elapsed":156,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e271a4b6-70ba-4b9f-a718-70c60786b343"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["e_tr_4.csv  e_ts_4.csv  m3_tr_4.csv  m3_ts_4.csv  m4_tr_4.csv  m4_ts_4.csv  \u001b[0m\u001b[01;34msample_data\u001b[0m/\n"]}]},{"cell_type":"code","source":["ri = 4\n","m3tr = pd.read_csv(\"m3_tr_{}.csv\".format(ri))\n","m3ts = pd.read_csv(\"m3_ts_{}.csv\".format(ri))\n","m4tr = pd.read_csv(\"m4_tr_{}.csv\".format(ri))\n","m4ts = pd.read_csv(\"m4_ts_{}.csv\".format(ri))\n","etr = pd.read_csv(\"e_tr_{}.csv\".format(ri))\n","ets = pd.read_csv(\"e_ts_{}.csv\".format(ri))"],"metadata":{"id":"DbrRjVJSkaOZ","executionInfo":{"status":"ok","timestamp":1716437424141,"user_tz":300,"elapsed":1643,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["m3tr.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"b91-1RvT1KrA","executionInfo":{"status":"ok","timestamp":1716437424142,"user_tz":300,"elapsed":12,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"a601a5f3-c5ab-4e3b-cf78-99f4a22977ea"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   HADM_ID         WINDOW_START           WINDOW_END  AKI_IN_ENCOUNTER  \\\n","0   168854  2148-12-24 02:20:00  2148-12-24 08:20:00             False   \n","1   160873  2120-07-31 01:50:00  2120-07-31 07:50:00             False   \n","2   145812  2161-05-07 04:39:00  2161-05-07 10:39:00             False   \n","3   110187  2115-03-10 06:16:00  2115-03-10 12:16:00             False   \n","4   137122  2141-08-08 04:00:00  2141-08-08 10:00:00              True   \n","\n","   aki_label GENDER  AGE  Potassium    MCV  Sodium  ...  INR(PT)   RDW  \\\n","0          0      F   78        4.1   80.0   137.0  ...     3.50  15.2   \n","1          0      M   42        3.2  100.0   139.0  ...     1.20  13.7   \n","2          0      F   63        3.8   92.0   140.0  ...     1.95  15.7   \n","3          0      M   72        4.0   89.0   141.0  ...     1.10  15.2   \n","4          1      M   47        3.6   87.0   138.0  ...     2.10  17.5   \n","\n","   Anion Gap    PT    pH        BUN   Lactate  Creatinine  Bilirubin, Total  \\\n","0       14.0  32.6  7.47  19.000000  0.832204         1.0               0.2   \n","1       14.0  13.6  7.46   5.396977  3.000000         0.6               3.5   \n","2       16.0  16.7  7.44  26.171233  2.400000         0.9               0.7   \n","3        9.0  13.2  7.43  38.000000  1.300000         0.8               1.0   \n","4       10.0  22.3  7.47  15.413917  1.500000         1.6               6.2   \n","\n","    PTT  \n","0  38.1  \n","1  27.7  \n","2  32.5  \n","3  35.8  \n","4  35.7  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-15a6cca1-bcd3-4f8b-83bf-8b475e33993d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>HADM_ID</th>\n","      <th>WINDOW_START</th>\n","      <th>WINDOW_END</th>\n","      <th>AKI_IN_ENCOUNTER</th>\n","      <th>aki_label</th>\n","      <th>GENDER</th>\n","      <th>AGE</th>\n","      <th>Potassium</th>\n","      <th>MCV</th>\n","      <th>Sodium</th>\n","      <th>...</th>\n","      <th>INR(PT)</th>\n","      <th>RDW</th>\n","      <th>Anion Gap</th>\n","      <th>PT</th>\n","      <th>pH</th>\n","      <th>BUN</th>\n","      <th>Lactate</th>\n","      <th>Creatinine</th>\n","      <th>Bilirubin, Total</th>\n","      <th>PTT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168854</td>\n","      <td>2148-12-24 02:20:00</td>\n","      <td>2148-12-24 08:20:00</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>78</td>\n","      <td>4.1</td>\n","      <td>80.0</td>\n","      <td>137.0</td>\n","      <td>...</td>\n","      <td>3.50</td>\n","      <td>15.2</td>\n","      <td>14.0</td>\n","      <td>32.6</td>\n","      <td>7.47</td>\n","      <td>19.000000</td>\n","      <td>0.832204</td>\n","      <td>1.0</td>\n","      <td>0.2</td>\n","      <td>38.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>160873</td>\n","      <td>2120-07-31 01:50:00</td>\n","      <td>2120-07-31 07:50:00</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>M</td>\n","      <td>42</td>\n","      <td>3.2</td>\n","      <td>100.0</td>\n","      <td>139.0</td>\n","      <td>...</td>\n","      <td>1.20</td>\n","      <td>13.7</td>\n","      <td>14.0</td>\n","      <td>13.6</td>\n","      <td>7.46</td>\n","      <td>5.396977</td>\n","      <td>3.000000</td>\n","      <td>0.6</td>\n","      <td>3.5</td>\n","      <td>27.7</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>145812</td>\n","      <td>2161-05-07 04:39:00</td>\n","      <td>2161-05-07 10:39:00</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>63</td>\n","      <td>3.8</td>\n","      <td>92.0</td>\n","      <td>140.0</td>\n","      <td>...</td>\n","      <td>1.95</td>\n","      <td>15.7</td>\n","      <td>16.0</td>\n","      <td>16.7</td>\n","      <td>7.44</td>\n","      <td>26.171233</td>\n","      <td>2.400000</td>\n","      <td>0.9</td>\n","      <td>0.7</td>\n","      <td>32.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>110187</td>\n","      <td>2115-03-10 06:16:00</td>\n","      <td>2115-03-10 12:16:00</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>M</td>\n","      <td>72</td>\n","      <td>4.0</td>\n","      <td>89.0</td>\n","      <td>141.0</td>\n","      <td>...</td>\n","      <td>1.10</td>\n","      <td>15.2</td>\n","      <td>9.0</td>\n","      <td>13.2</td>\n","      <td>7.43</td>\n","      <td>38.000000</td>\n","      <td>1.300000</td>\n","      <td>0.8</td>\n","      <td>1.0</td>\n","      <td>35.8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>137122</td>\n","      <td>2141-08-08 04:00:00</td>\n","      <td>2141-08-08 10:00:00</td>\n","      <td>True</td>\n","      <td>1</td>\n","      <td>M</td>\n","      <td>47</td>\n","      <td>3.6</td>\n","      <td>87.0</td>\n","      <td>138.0</td>\n","      <td>...</td>\n","      <td>2.10</td>\n","      <td>17.5</td>\n","      <td>10.0</td>\n","      <td>22.3</td>\n","      <td>7.47</td>\n","      <td>15.413917</td>\n","      <td>1.500000</td>\n","      <td>1.6</td>\n","      <td>6.2</td>\n","      <td>35.7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15a6cca1-bcd3-4f8b-83bf-8b475e33993d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-15a6cca1-bcd3-4f8b-83bf-8b475e33993d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-15a6cca1-bcd3-4f8b-83bf-8b475e33993d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-13272dcd-5e24-435e-815d-fc68439cbe89\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13272dcd-5e24-435e-815d-fc68439cbe89')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-13272dcd-5e24-435e-815d-fc68439cbe89 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"m3tr"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def data_preprocessing(m3tr, m3ts, m4tr, m4ts,\n","                       etr, ets):\n","    col_drop = ['HADM_ID', 'WINDOW_START', 'WINDOW_END', 'AKI_IN_ENCOUNTER']\n","    df_cols = m3tr.columns.tolist()\n","    cat_f_ls = df_cols[3:6]\n","    for i in cat_f_ls:\n","        m3tr[i] = m3tr[i].astype('category').cat.codes\n","        m3ts[i] = m3ts[i].astype('category').cat.codes\n","        m4tr[i] = m4tr[i].astype('category').cat.codes\n","        m4ts[i] = m4ts[i].astype('category').cat.codes\n","        etr[i] = etr[i].astype('category').cat.codes\n","        ets[i] = ets[i].astype('category').cat.codes\n","\n","    m3tr = m3tr.drop(col_drop, axis=1)\n","    m3ts = m3ts.drop(col_drop, axis=1)\n","    m4tr = m4tr.drop(col_drop, axis=1)\n","    m4ts = m4ts.drop(col_drop, axis=1)\n","    etr = etr.drop(col_drop, axis=1)\n","    ets = ets.drop(col_drop, axis=1)\n","    return m3tr, m3ts, m4tr, m4ts, etr, ets"],"metadata":{"id":"klpGv2qo0TcT","executionInfo":{"status":"ok","timestamp":1716437424142,"user_tz":300,"elapsed":8,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["m3tr, m3ts, m4tr, m4ts, etr, ets = data_preprocessing(\n","    m3tr, m3ts, m4tr, m4ts, etr, ets)"],"metadata":{"id":"WsibH7Jd0Rqi","executionInfo":{"status":"ok","timestamp":1716437424367,"user_tz":300,"elapsed":232,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["m3tr.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":243},"id":"n2u_uk_z0WjC","executionInfo":{"status":"ok","timestamp":1716437424367,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"13f67c86-eb94-4e51-f32b-d7131c5116e6"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   aki_label  GENDER  AGE  Potassium    MCV  Sodium  Calcium, Total  \\\n","0          0       0   78        4.1   80.0   137.0             9.5   \n","1          0       1   42        3.2  100.0   139.0             9.1   \n","2          0       0   63        3.8   92.0   140.0             8.6   \n","3          0       1   72        4.0   89.0   141.0             8.5   \n","4          1       1   47        3.6   87.0   138.0             8.4   \n","\n","   Phosphate  Magnesium  INR(PT)   RDW  Anion Gap    PT    pH        BUN  \\\n","0        4.2        2.0     3.50  15.2       14.0  32.6  7.47  19.000000   \n","1        3.5        1.6     1.20  13.7       14.0  13.6  7.46   5.396977   \n","2        3.8        2.0     1.95  15.7       16.0  16.7  7.44  26.171233   \n","3        2.5        1.8     1.10  15.2        9.0  13.2  7.43  38.000000   \n","4        3.4        2.5     2.10  17.5       10.0  22.3  7.47  15.413917   \n","\n","    Lactate  Creatinine  Bilirubin, Total   PTT  \n","0  0.832204         1.0               0.2  38.1  \n","1  3.000000         0.6               3.5  27.7  \n","2  2.400000         0.9               0.7  32.5  \n","3  1.300000         0.8               1.0  35.8  \n","4  1.500000         1.6               6.2  35.7  "],"text/html":["\n","  <div id=\"df-50edbc50-36d2-4de9-97fb-307303ae6d58\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>aki_label</th>\n","      <th>GENDER</th>\n","      <th>AGE</th>\n","      <th>Potassium</th>\n","      <th>MCV</th>\n","      <th>Sodium</th>\n","      <th>Calcium, Total</th>\n","      <th>Phosphate</th>\n","      <th>Magnesium</th>\n","      <th>INR(PT)</th>\n","      <th>RDW</th>\n","      <th>Anion Gap</th>\n","      <th>PT</th>\n","      <th>pH</th>\n","      <th>BUN</th>\n","      <th>Lactate</th>\n","      <th>Creatinine</th>\n","      <th>Bilirubin, Total</th>\n","      <th>PTT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>78</td>\n","      <td>4.1</td>\n","      <td>80.0</td>\n","      <td>137.0</td>\n","      <td>9.5</td>\n","      <td>4.2</td>\n","      <td>2.0</td>\n","      <td>3.50</td>\n","      <td>15.2</td>\n","      <td>14.0</td>\n","      <td>32.6</td>\n","      <td>7.47</td>\n","      <td>19.000000</td>\n","      <td>0.832204</td>\n","      <td>1.0</td>\n","      <td>0.2</td>\n","      <td>38.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>42</td>\n","      <td>3.2</td>\n","      <td>100.0</td>\n","      <td>139.0</td>\n","      <td>9.1</td>\n","      <td>3.5</td>\n","      <td>1.6</td>\n","      <td>1.20</td>\n","      <td>13.7</td>\n","      <td>14.0</td>\n","      <td>13.6</td>\n","      <td>7.46</td>\n","      <td>5.396977</td>\n","      <td>3.000000</td>\n","      <td>0.6</td>\n","      <td>3.5</td>\n","      <td>27.7</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>63</td>\n","      <td>3.8</td>\n","      <td>92.0</td>\n","      <td>140.0</td>\n","      <td>8.6</td>\n","      <td>3.8</td>\n","      <td>2.0</td>\n","      <td>1.95</td>\n","      <td>15.7</td>\n","      <td>16.0</td>\n","      <td>16.7</td>\n","      <td>7.44</td>\n","      <td>26.171233</td>\n","      <td>2.400000</td>\n","      <td>0.9</td>\n","      <td>0.7</td>\n","      <td>32.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>72</td>\n","      <td>4.0</td>\n","      <td>89.0</td>\n","      <td>141.0</td>\n","      <td>8.5</td>\n","      <td>2.5</td>\n","      <td>1.8</td>\n","      <td>1.10</td>\n","      <td>15.2</td>\n","      <td>9.0</td>\n","      <td>13.2</td>\n","      <td>7.43</td>\n","      <td>38.000000</td>\n","      <td>1.300000</td>\n","      <td>0.8</td>\n","      <td>1.0</td>\n","      <td>35.8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>47</td>\n","      <td>3.6</td>\n","      <td>87.0</td>\n","      <td>138.0</td>\n","      <td>8.4</td>\n","      <td>3.4</td>\n","      <td>2.5</td>\n","      <td>2.10</td>\n","      <td>17.5</td>\n","      <td>10.0</td>\n","      <td>22.3</td>\n","      <td>7.47</td>\n","      <td>15.413917</td>\n","      <td>1.500000</td>\n","      <td>1.6</td>\n","      <td>6.2</td>\n","      <td>35.7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50edbc50-36d2-4de9-97fb-307303ae6d58')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-50edbc50-36d2-4de9-97fb-307303ae6d58 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-50edbc50-36d2-4de9-97fb-307303ae6d58');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-22ff9309-d461-43bf-8871-c2a2a9fb3ecd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22ff9309-d461-43bf-8871-c2a2a9fb3ecd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-22ff9309-d461-43bf-8871-c2a2a9fb3ecd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"m3tr","summary":"{\n  \"name\": \"m3tr\",\n  \"rows\": 26414,\n  \"fields\": [\n    {\n      \"column\": \"aki_label\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GENDER\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 18,\n        \"max\": 89,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          47,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Potassium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5127686707556285,\n        \"min\": 2.9,\n        \"max\": 6.1,\n        \"num_unique_values\": 129,\n        \"samples\": [\n          5.266666666666667,\n          4.35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MCV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.828463671369268,\n        \"min\": 70.69668018746592,\n        \"max\": 111.00953124444388,\n        \"num_unique_values\": 407,\n        \"samples\": [\n          92.16886538524813,\n          73.88914564038004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sodium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8911224111218314,\n        \"min\": 125.0,\n        \"max\": 151.0,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          136.66666666666666,\n          130.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Calcium, Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6618315908275915,\n        \"min\": 6.5,\n        \"max\": 10.907610065789347,\n        \"num_unique_values\": 1582,\n        \"samples\": [\n          9.253275918422023,\n          8.000705333249995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phosphate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9681843331184049,\n        \"min\": 0.7717727678601474,\n        \"max\": 7.886440228480796,\n        \"num_unique_values\": 1602,\n        \"samples\": [\n          3.6452655322993386,\n          3.571352188015269\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Magnesium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28490205570225585,\n        \"min\": 1.2607046916231592,\n        \"max\": 3.0,\n        \"num_unique_values\": 388,\n        \"samples\": [\n          1.9040658362187328,\n          1.933333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INR(PT)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5257795034432009,\n        \"min\": -0.1846679953008806,\n        \"max\": 5.3,\n        \"num_unique_values\": 1263,\n        \"samples\": [\n          1.9194734523327603,\n          0.976872895877526\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RDW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0054478069529362,\n        \"min\": 9.939760698739288,\n        \"max\": 22.4,\n        \"num_unique_values\": 431,\n        \"samples\": [\n          17.802560335881225,\n          21.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Anion Gap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9596868899605195,\n        \"min\": 5.77849742950418,\n        \"max\": 25.0,\n        \"num_unique_values\": 110,\n        \"samples\": [\n          10.666666666666666,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.070119307296354,\n        \"min\": 3.4441806966995925,\n        \"max\": 43.45091103379564,\n        \"num_unique_values\": 1804,\n        \"samples\": [\n          12.99137941982895,\n          38.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06348965957099169,\n        \"min\": 7.14,\n        \"max\": 7.6640402128133,\n        \"num_unique_values\": 7672,\n        \"samples\": [\n          7.394669788780122,\n          7.547739363207949\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BUN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.36298203812201,\n        \"min\": -12.316982837789135,\n        \"max\": 110.34535199798395,\n        \"num_unique_values\": 16022,\n        \"samples\": [\n          45.68505589090718,\n          21.34132474301541\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lactate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.121301131438497,\n        \"min\": -2.1744843402830427,\n        \"max\": 11.2,\n        \"num_unique_values\": 9315,\n        \"samples\": [\n          1.970682839744515,\n          1.7966171327793266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Creatinine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8517493249662864,\n        \"min\": -0.541916999338055,\n        \"max\": 5.0,\n        \"num_unique_values\": 149,\n        \"samples\": [\n          1.25,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bilirubin, Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2431698585819313,\n        \"min\": -8.30150743191125,\n        \"max\": 24.0,\n        \"num_unique_values\": 9741,\n        \"samples\": [\n          -1.0555137087844086,\n          2.7798203579636884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.0888315995064,\n        \"min\": -27.34256265357176,\n        \"max\": 150.0,\n        \"num_unique_values\": 2808,\n        \"samples\": [\n          76.0,\n          21.01384491096607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["def preprocess(df):\n","    # Example: assume 'label' is the target column and the rest are features\n","    features = df.drop('aki_label', axis=1).values\n","    labels = df['aki_label'].values\n","    return tf.data.Dataset.from_tensor_slices((features, labels)).batch(50)"],"metadata":{"id":"vwcatqBe3Yvc","executionInfo":{"status":"ok","timestamp":1716437424368,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["m3tr = preprocess(m3tr)\n","m4tr = preprocess(m4tr)\n","etr = preprocess(etr)"],"metadata":{"id":"Yfw-4dXl3d1o","executionInfo":{"status":"ok","timestamp":1716437424598,"user_tz":300,"elapsed":234,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["m3tr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"64e9Ks7pFdcw","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":8,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"f34882f5-2c75-4bd7-f667-870d96bf954f"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_BatchDataset element_spec=(TensorSpec(shape=(None, 18), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.int8, name=None))>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["batch = next(iter(m3tr))\n","\n","# Compute the shape of the features (excluding the labels)\n","input_shape = batch[0].shape[1]\n","# input_shape = features_shape[1]\n","print(\"Features shape:\", input_shape)\n","# input_shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4yMp_tzI8NQ1","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":6,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"712a57f8-1cab-4a59-e68c-ad0802dd94dd"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Features shape: 18\n"]}]},{"cell_type":"code","source":["def create_keras_model(input_shape):\n","    initializer = tf.keras.initializers.GlorotNormal()\n","    model = tf.keras.Sequential([\n","        tf.keras.layers.Dense(128, activation='relu',\n","                              input_shape=(input_shape,),\n","                              kernel_initializer=initializer),\n","        tf.keras.layers.Dense(64, activation='relu', kernel_initializer=initializer),\n","        tf.keras.layers.Dense(1, activation='sigmoid', kernel_initializer=initializer)\n","    ])\n","    return model"],"metadata":{"id":"ObTdXBqakaJH","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":5,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# def make_federated_data(client_data, client_ids):\n","#     return [\n","#         client_data[i].batch(32)\n","#         for i in client_ids\n","#     ]\n","\n","def make_federated_data(client_data, client_ids):\n","    return [\n","        client_data[i]\n","        for i in client_ids\n","    ]"],"metadata":{"id":"1rAFyDaNkaBA","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":5,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"v7KYFBpVF8FA","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Create a list of client datasets\n","federated_train_data = [m3tr, m4tr, etr]\n","\n","# Client IDs\n","client_ids = [0, 1, 2]\n","\n","# Federated dataset\n","federated_data = make_federated_data(federated_train_data, client_ids)"],"metadata":{"id":"AhT5X_KskZ-R","collapsed":true,"executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["federated_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcIAn_B9FxI5","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"188fc9a2-276d-47d7-d063-56a995c99475"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<_BatchDataset element_spec=(TensorSpec(shape=(None, 18), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.int8, name=None))>,\n"," <_BatchDataset element_spec=(TensorSpec(shape=(None, 18), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.int8, name=None))>,\n"," <_BatchDataset element_spec=(TensorSpec(shape=(None, 18), dtype=tf.float64, name=None), TensorSpec(shape=(None,), dtype=tf.int8, name=None))>]"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["def model_fn():\n","    keras_model = create_keras_model(input_shape)\n","    return tff.learning.models.from_keras_model(\n","        keras_model,\n","        input_spec=federated_train_data[0].element_spec,\n","        loss=tf.keras.losses.BinaryCrossentropy(),\n","        metrics=[tf.keras.metrics.BinaryAccuracy()]\n","    )"],"metadata":{"id":"tjkZ9NkdkZ7R","executionInfo":{"status":"ok","timestamp":1716437424599,"user_tz":300,"elapsed":3,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Define client optimizer function\n","def client_optimizer_fn():\n","    return tff.learning.optimizers.build_sgdm(learning_rate=0.01)"],"metadata":{"id":"q52TqqDW6hau","executionInfo":{"status":"ok","timestamp":1716437424600,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# Initialize a federated averaging process with client optimizer\n","iterative_process = tff.learning.algorithms.build_weighted_mime_lite(\n","    model_fn,\n","    base_optimizer=client_optimizer_fn())"],"metadata":{"collapsed":true,"id":"k80-THph6hX9","executionInfo":{"status":"ok","timestamp":1716437434342,"user_tz":300,"elapsed":9746,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Initialize the federated process\n","state = iterative_process.initialize()"],"metadata":{"id":"Xe2fhLAA6hVc","executionInfo":{"status":"ok","timestamp":1716437436795,"user_tz":300,"elapsed":2467,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Run federated learning\n","NUM_ROUNDS = 25\n","\n","for round_num in range(1, NUM_ROUNDS + 1):\n","    state, metrics = iterative_process.next(state, federated_data)\n","    print(f'Round {round_num}, Metrics={metrics}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ZIkcniq6hSz","outputId":"b56736e9-4669-4a18-c34b-d0744f5b6507","executionInfo":{"status":"ok","timestamp":1716437620359,"user_tz":300,"elapsed":183566,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Round 1, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.71312606), ('loss', 4.4241514), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 2, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 3, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 4, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 5, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 6, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 7, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 8, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 9, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 10, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 11, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 12, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 13, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 14, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 15, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 16, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 17, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 18, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 19, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 20, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 21, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 22, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 23, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 24, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n","Round 25, Metrics=OrderedDict([('distributor', ()), ('client_work', OrderedDict([('train', OrderedDict([('binary_accuracy', 0.7134322), ('loss', 4.4203005), ('num_examples', 202528), ('num_batches', 4052)]))])), ('aggregator', OrderedDict([('mean_value', ()), ('mean_weight', ())])), ('finalizer', OrderedDict([('update_non_finite', 0)]))])\n"]}]},{"cell_type":"code","source":["def get_trained_weights(state):\n","    return state.model.trainable"],"metadata":{"id":"RHAleNyHNL-6","executionInfo":{"status":"ok","timestamp":1716437620359,"user_tz":300,"elapsed":16,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["def model_fn2():\n","    keras_model = create_keras_model(input_shape)\n","    keras_model.compile(optimizer='adam', loss='binary_crossentropy',\n","                        metrics=['accuracy'])\n","    return keras_model"],"metadata":{"id":"pOx-3FD-NawJ","executionInfo":{"status":"ok","timestamp":1716437620360,"user_tz":300,"elapsed":14,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Extract the global model weights from the state\n","global_model_weights = state.global_model_weights\n","\n","# Set the weights to the model\n","model = model_fn2()\n","global_model_weights.assign_weights_to(model)"],"metadata":{"collapsed":true,"id":"LHxbg8wOOlNa","executionInfo":{"status":"ok","timestamp":1716437620509,"user_tz":300,"elapsed":163,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Preprocess the test data\n","def preprocess_test(df):\n","    features = df.drop('aki_label', axis=1).values\n","    labels = df['aki_label'].values\n","    return features, labels\n","\n","def evaluate_model(model, test_data):\n","    # Extract the Keras model from the TFF wrapper\n","    # keras_model = model.keras_model\n","\n","    # Evaluate the Keras model on the test data\n","    loss, accuracy = model.evaluate(test_data)\n","    return loss, accuracy"],"metadata":{"id":"60YaolnsLef0","executionInfo":{"status":"ok","timestamp":1716437620509,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["m3ts_features, m3ts_labels = preprocess_test(m3ts)\n","m4ts_features, m4ts_labels = preprocess_test(m4ts)\n","ets_features, ets_labels = preprocess_test(ets)"],"metadata":{"id":"L3sBciq8Lebc","executionInfo":{"status":"ok","timestamp":1716437620509,"user_tz":300,"elapsed":4,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["def preprocess_test_data(features, labels):\n","    # Convert features and labels to TensorFlow dataset\n","    test_data = tf.data.Dataset.from_tensor_slices((features, labels))\n","    # Batch the test data\n","    test_data_batched = test_data.batch(50)\n","    return test_data_batched"],"metadata":{"id":"KmdwjhlUSvR1","executionInfo":{"status":"ok","timestamp":1716437620509,"user_tz":300,"elapsed":3,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Preprocess and evaluate each test dataset\n","test_datasets = {'m3ts': (m3ts_features, m3ts_labels),\n","                 'm4ts': (m4ts_features, m4ts_labels),\n","                 'ets': (ets_features, ets_labels)}\n","\n","for dataset_name, (features, labels) in test_datasets.items():\n","    print(f'Evaluating model on {dataset_name} dataset...')\n","    test_data = preprocess_test_data(features, labels)\n","    loss, accuracy = evaluate_model(model, test_data)"],"metadata":{"id":"JmbnuFiHLeYU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716437624653,"user_tz":300,"elapsed":4147,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}},"outputId":"693e2c51-9b3f-4e7e-f3db-9b15f257bcb1"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluating model on m3ts dataset...\n","133/133 [==============================] - 1s 4ms/step - loss: 126.9296 - accuracy: 0.6135\n","Evaluating model on m4ts dataset...\n","245/245 [==============================] - 1s 3ms/step - loss: 119.5307 - accuracy: 0.6381\n","Evaluating model on ets dataset...\n","637/637 [==============================] - 2s 2ms/step - loss: 79.1087 - accuracy: 0.7606\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"96m0IMcPLeVN","executionInfo":{"status":"ok","timestamp":1716437624654,"user_tz":300,"elapsed":17,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"YTaG-SuLLeSU","executionInfo":{"status":"ok","timestamp":1716437624654,"user_tz":300,"elapsed":15,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nMzzfc-SkZ3g","executionInfo":{"status":"ok","timestamp":1716437624849,"user_tz":300,"elapsed":209,"user":{"displayName":"Kun-Yi Chen","userId":"12048986946604963123"}}},"execution_count":29,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/tensorflow/federated/blob/v0.78.0/docs/tutorials/federated_learning_for_image_classification.ipynb","timestamp":1716419471007}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}